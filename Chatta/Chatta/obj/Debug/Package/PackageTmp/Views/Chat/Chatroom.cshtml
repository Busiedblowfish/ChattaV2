<!--This is the client, Chatroom is the view-->

@{
    ViewBag.Title = "Chatroom";
}

<!-- This is the title header for the chat hub -->
<div id="whole-box-header">
    <div class="groupchat-header"><h4>Group Chat Messages</h4></div>
    <div class="userbox-header"><h4>Online Users</h4></div>
</div>
<!-- This is the whole chat box, split into individual divs -->
<div id="whole-box">
    <div class="groupChat-box">
        <div id="chat-box" data-bind="foreach: messages">
            <!-- This will display the list of group chats -->
            <ul>
                <li>
                    <div class="chat-property-username" data-bind="text: username">
                    </div>
                    <div class="chat-property-message" data-bind="html: message">
                    </div>
                    <div class="chat-property-timestamp" data-bind="text: timestamp.toLocaleTimeString()">
                    <br style="clear: left" />
                    </div>
                </li>
            </ul>
        </div>
        <!-- This is the Textbox1 and send div -->
        <div class="lower-left">
            <div class="msg-box">
                <textarea id="Textbox1" maxlength="160" placeholder="Type your message here"></textarea>
            </div>
            <div class="send-box">
                <!-- Some issues with running Button controller on the server side and firing javascript at the same time
                <asp:Button ID="btnSend" class="btn btn-primary btn-lg" runat="server" Height="100%" Text="Send" ToolTip="Send Message" Width="100%"/>
                -->
                <input id="sendButton" class="btn btn-primary btn-lg" style="height: 100%; width: 100%" type="submit" value="Send" />
            </div>
        </div>
    </div>
    <!-- This is the list of connected user(authenticated by -->
    <div id="user-box">
        <ul data-bind="foreach: contacts">
            <li class="user-list" data-bind="text: username"></li>
        </ul>
    </div>
</div>

@section scripts{
    <!--Script references. -->
    <!--Reference the jQuery library. -->
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.1.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
        <!--Reference Chatta.js for Knockout javascript bindings on the chat page. -->
    <script src="~/Scripts/knockout-3.4.0.js"></script>
    <script src="~/KO/Chatta.js"></script>
    <script src="~/signalr/hubs"></script>
    <!--Add script to update the page and send messages to connected clients.-->
    <script type="text/javascript">
        //<<-- Main function starts here -->
        $(document).ready(function () {

            //Call the chatviewModel for page rendering
            var chat = new chatta.chatViewModel();
            var users = new chatta.connectedUsersViewModel();

            //Use Json object to parse the ChatUser Model
            var currentUser = new chatta.chatUser(@Html.Raw(Json.Encode(Model)));

            // Declare a proxy to reference the hub(ChatHub will be reference using camelCase (chatHub)).
            var chattaHub = $.connection.chatHub;

            // Initialize the hub round-trip state
            chattaHub.state.username = currentUser.username

            //Call client-side event handlers from /ChatHub(userId, message, timestamp)
            //userId is the connectionID of individual connected client/user
            chattaHub.client.onMessageReceived = function (relay) {
                var localTime = new Date()     //Current local time
                //var time = localTime.toLocaleTimeString();
                //Push relay(message) to clients using the ChatMessage method
                chat.messages.push(new chatta.chatMessage(relay.Username, relay.Message, localTime));
                //var objDiv = document.getElementById("#chat-box");
                //objDiv.scrollTop(0);
            }


            // Step 1: Start the connection
            // Step 2: Initialize all currently connected users
            // Step 3: Join users to chat hub
            // Step 4: Notify all users of currenlty connected users
            $.connection.hub.start().done(function () {
                chattaHub.server.getConnectedUsers()
                            .done(function (connectedUsers) {
                                ko.utils.arrayForEach(connectedUsers, function (item) {
                                    users.contacts.push(new chatta.chatUser(item.Username, item.ConnectionID));
                                });
                            }).done(function () {
                                chattaHub.server.joined();
                            });
            });



            //A new client has joined the hub, add new user to  users box
            //userId refers to the connectionID for that particular user
            chattaHub.client.joins = function (userId, userName, timeStamp) {
                var connectedUser = new chatta.chatUser(userName, userId);
                users.contacts.push(connectedUser);
            }

            //A client has left the chatroom/disconnected from server, remove user from user's box
            chattaHub.client.leaves = function (userId, userName, timeStamp) {
                var disconnectedUser = new chatta.chatUser(userName, userId);
                users.customRemove(disconnectedUser);
            }


            //Display message in #Textbox1 of user
            function sendMessageContent() {
                var content = $("#Textbox1").val();
                if (content != "" && content != null) {
                    var msg = new chatta.chatMessage(currentUser.username, content);
                    // Call the Send method on the hub(server).
                    chattaHub.server.send(msg).done(function () {
                        // Clear text box and reset focus for next comment.
                        $("#Textbox1").val("").focus();
                    }).fail(function (e) {
                        //Check for errors
                        alert("Error connecting to server");
                    });
                }
            }

            //Handles event for clicking the send button
            //On clicking the send button, send the message
            $("#sendButton").click(function () {
                sendMessageContent();
            });

            
            // Handles multiple Enter keystroke press event
            $('#Textbox1').keypress(function (e) {
                if (e.which == 13) {
                    sendMessageContent();
                }
            });
            

            //Apply Knockout JS bindings on the chat and user box
            ko.applyBindings(chat, $("#chat-box")[0]);
            ko.applyBindings(users, $("#user-box")[0]);

            
        });
    </script>

}